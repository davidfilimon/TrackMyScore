@using TrackMyScore.Services
@model TrackMyScore.Models.UserGamesModel
@{
    int loggedUser = (int)ViewData["loggedUserId"];
    var customGames = Model.CustomGames ?? new List<Game>();
    var matches = Model.Matches ?? new List<Match>();
    var tournaments = Model.Tournaments.Distinct() ?? new List<Tournament>();
    int pictureId = Model.User.Picture;
    var matchWinners = Model.MatchWinners ?? new Dictionary<int, string>();
    var tournamentWinners = Model.TournamentWinners ?? new Dictionary<int, string>();
}
@inject FollowerService followerService

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>@Model.User.Username - TrackMyScore</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script> 
  <style>
    :root {
        --primary-dark: #1A3C2A;
        --primary:        #2A5940;
        --primary-light:#3B7A5A;
        --accent-gold:    #D4AF37;
        --accent-gold-light:#F0D875;
        --card-bg:        #234134;
        --text-light:   #E8F5E9;
        --text-muted:   #A7C0A7;
        --spacing:        8px;
    }

    .form-control {
      background-color: var(--primary-light);
      color: var(--text-light);
    }

    body {
        background: var(--primary-dark);
        color: var(--text-light);
        font-family: 'Segoe UI', sans-serif;
    }

    .container {
        max-width: 900px;
        margin: auto;
        padding: 0 var(--spacing);
    }

    .profile-header {
        background: var(--card-bg);
        border-radius: 12px;
        padding: calc(var(--spacing)*3);
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        margin-bottom: calc(var(--spacing)*3);
        position: relative;
    }

    .profile-header .avatar {
        width: 56px; height: 56px;
        background: var(--accent-gold);
        color: var(--primary-dark);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .profile-header h2 {
        margin: 0 0 0 1rem;
        font-weight: 600;
        color: var(--accent-gold);
    }

    .profile-header .admin-button {
        position: absolute;
        top: var(--spacing);
        right: var(--spacing);
        color: var(--accent-gold);
        transition: transform .7s;
    }

    .profile-header .admin-button:hover {
        transform: rotate(360deg);
        color: var(--accent-gold-light);
    }

    .follow-btn {
        background: var(--primary);
        color: var(--text-light);
        border: 2px solid var(--primary-light);
        transition: all .3s;
    }

    .follow-btn:hover {
        background: var(--primary-light);
        transform: translateY(-2px);
    }

    .followers-counts a {
        color: var(--text-light);
        text-decoration: none;
    }
    
    .followers-counts a:hover {
        color: var(--accent-gold);
    }
    
    .nav-tabs {
        margin-bottom: calc(var(--spacing)*2);
        border-bottom: none;
    }

    .nav-tabs .nav-link {
        color: var(--text-muted);
        border: none;
        padding: .75rem 1.5rem;
    }

    .nav-tabs .nav-link.active {
        background: var(--card-bg);
        color: var(--accent-gold);
    }

    .tab-content {
        background: var(--card-bg);
        border-radius: 12px;
        padding: calc(var(--spacing)*3);
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }

    .tab-pane h3 {
        color: var(--accent-gold);
        margin-bottom: calc(var(--spacing)*2);
    }

    .card-item {
        background: var(--primary);
        border-radius: 8px;
        padding: calc(var(--spacing)*2);
        margin-bottom: calc(var(--spacing)*2);
        display: flex;
        justify-content: space-between;
        align-items: center;
        transition: transform .2s, background .3s;
    }

    .card-item:hover {
        background: var(--primary-light);
        transform: translateY(-2px);
    }

    .card-item .info {
        color: var(--text-light);
    }

    .details-btn {
        background: var(--accent-gold);
        color: var(--primary-dark);
        border: none;
        transition: all .3s;
    }

    .details-btn:hover {
        background: var(--accent-gold-light);
        transform: translateY(-2px);
    }

    .games-list, .tournaments-list {
        max-height: 300px;
        overflow-y: auto;
    }

    .modal-content {
        background: var(--card-bg);
        color: var(--text-light);
    }

    .modal-header {
        border-bottom: 1px solid var(--primary-light);
    }

    .follower-item {
        padding: calc(var(--spacing)*1);
        border-bottom: 1px solid var(--primary-light);
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .follower-item:last-child {
        border-bottom: none;
    }

    .follower-item .user-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .follower-item .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
        background-color: var(--accent-gold);
        color: var(--primary-dark);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
        font-weight: 600;
    }

    .select-filter {
        background-color: var(--primary);
        color: var(--text-light);
        border: 2px solid var(--primary-light);
    }

    .select-filter option {
        background-color: var(--primary-dark);
        color: var(--text-light);
    }

    .select-filter:focus {
        border-color: var(--accent-gold);
        box-shadow: 0 0 0 .25rem rgba(212,175,55,.25);
    }

    .popup-overlay {
        position: fixed;
        top: 0; left: 0;
        width: 100%; height: 100%;
        background: rgba(0,0,0,0.6);
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 999;
    }

    .popup-content {
        background: var(--card-bg);
        color: var(--text-light);
        padding: calc(var(--spacing) * 3);
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        width: 90%;
        max-width: 400px;
        position: relative;
    }

    .close-btn {
        position: absolute;
        top: calc(var(--spacing) * 1);
        right: calc(var(--spacing) * 1);
        font-size: 1.5rem;
        color: var(--text-muted);
        cursor: pointer;
        transition: color .2s;
    }
    .close-btn:hover {
        color: var(--accent-gold-light);
    }

    .avatar {
        width: 64px;
        height: 64px;
        border-radius: 50%;
        object-fit: cover;
        background-color: transparent;
    }
    .avatar-option {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        margin: 4px;
        cursor: pointer;
        transition: transform .2s, border .2s;
    }
    .avatar-option.selected {
        border: 2px solid var(--accent-gold);
        transform: scale(1.1);
    }
    .avatar-selection { 
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        justify-content: center;
        margin-bottom: 16px;
    }

    #editMessage {
      display: none;
      padding: 8px;
      border-radius: 4px;
      margin-bottom: 1rem;
    }
    #editMessage.success {
      background-color: #d4edda;
      color:            #155724;
      border:           1px solid #c3e6cb;
    }
    #editMessage.error {
      background-color: #f8d7da;
      color:            #721c24;
      border:           1px solid #f5c6cb;
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="profile-header d-flex align-items-center">
      @if (Model.User.Picture == 0) {
        <div class="avatar">@Model.User.Username[0].ToString().ToUpper()</div>
      } else {
        <img 
          class="avatar" 
          src="~/images/avatars/avatar-@(pictureId).png" 
          alt="@Model.User.Username" 
          width="128" height="128" />
      }
      <h2>@Model.User.Username</h2>
      @if (Model.User.isAdmin && loggedUser == Model.User.Id) {
        <a asp-controller="Admin" asp-action="Dashboard" class="admin-button">
          <i class="fa-solid fa-gear fa-lg"></i>
        </a>
      }
    </div>

    <div class="d-flex mb-3">
      @if (loggedUser != 0 && loggedUser != Model.User.Id) {
        var isFollowing = await followerService.IsFollowing(loggedUser, Model.User.Id);
        @if(isFollowing) {
          <button onclick="unfollow(@Model.User.Id)" class="btn follow-btn me-3">
            Unfollow
          </button>
        } else {
          <button onclick="follow(@Model.User.Id)" class="btn follow-btn me-3">
            Follow
          </button>
        } 
      }
      else if (loggedUser == Model.User.Id) {
        <button onclick="editProfile()" class="btn follow-btn me-3">Edit Profile</button>
      }
      <div class="followers-counts d-flex gap-3 mt-2">
        <a href="#" data-bs-toggle="modal" data-bs-target="#followersModal">
          @await followerService.GetNumberFollowers(Model.User.Id) Followers
        </a>
        <a href="#" data-bs-toggle="modal" data-bs-target="#followingModal">
          @await followerService.GetNumberFollowing(Model.User.Id) Following
        </a>
      </div>
    </div>

    <ul class="nav nav-tabs">
      <li class="nav-item"><a class="nav-link active" data-bs-toggle="tab" href="#info">Info</a></li>
      <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#history">History</a></li>
      <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#tournaments">Tournaments</a></li>
      <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#stats">Stats</a></li>
      <li class="nav-item"><a class="nav-link" data-bs-toggle="tab" href="#custom">Custom Games</a></li>
    </ul>

    <div class="tab-content">
      <div id="info" class="tab-pane fade show active">
        <h3>Player Info</h3>
        <p>Since: @Model.User.AccountCreationDate.ToString("yyyy-MM-dd")</p>
        <p>Respect: @Model.User.RespectPoints</p>
      </div>

      <div id="history" class="tab-pane fade">
        <h3>Match History</h3>

        <div class="d-flex gap-3 mb-3 align-items-center flex-wrap">
          <label class="mb-0">Month:</label>
          <select id="matchMonthFilter" class="form-select w-auto select-filter">
            <option value="">All</option>
            @for (int m = 1; m <= 12; m++) {
              <option value="@m">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
            }
          </select>
          <label class="mb-0">Year:</label>
          <select id="matchYearFilter" class="form-select w-auto select-filter">
            <option value="">All</option>
            @for (int y = DateTime.Now.Year; y >= DateTime.Now.Year - 5; y--) {
              <option value="@y">@y</option>
            }
          </select>
        </div>

        <div class="games-list">
        @foreach (var m in matches
                          .Where(m => m != null && m.Stage == -2))
        {
            var dt = m.StartDate;
            <div class="card-item match-item"
                data-month="@dt.Month" data-year="@dt.Year">
              <div class="info">
                <strong>@m.Name</strong>
                @m.Game?.Title <br/> @dt.ToString("yyyy-MM-dd")<br/>
                Winner: @Model.MatchWinners.GetValueOrDefault(m.Id, "N/A")
              </div>
              <a asp-controller="Match"
                asp-action="CurrentMatch"
                asp-route-id="@m.Id"
                class="btn details-btn">View</a>
            </div>
        }
        @if (!Model.Matches.Any(m => m != null && m.Stage == -2))
        {
          <p>No matches yet.</p>
        }
      </div>
      </div>

      <div id="tournaments" class="tab-pane fade">
        <h3>Tournament History</h3>

        <div class="d-flex gap-3 mb-3 align-items-center flex-wrap">
          <label class="mb-0">Month:</label>
          <select id="tournMonthFilter" class="form-select w-auto select-filter">
            <option value="">All</option>
            @for (int m = 1; m <= 12; m++) {
              <option value="@m">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
            }
          </select>
          <label class="mb-0">Year:</label>
          <select id="tournYearFilter" class="form-select w-auto select-filter">
            <option value="">All</option>
            @for (int y = DateTime.Now.Year; y >= DateTime.Now.Year - 5; y--) {
              <option value="@y">@y</option>
            }
          </select>
        </div>

        <div class="tournaments-list">
          @foreach (var t in tournaments.Where(t => t != null)) {
            var dt = t.StartDate;
            <div class="card-item tourn-item"
                 data-month="@dt.Month" data-year="@dt.Year">
              <div class="info">
                <strong>@t.Name</strong><br/>
                @dt.ToString("yyyy-MM-dd") - Winner: @tournamentWinners.GetValueOrDefault(t.Id, "N/A")
              </div>
              <a asp-controller="Tournament" asp-action="CurrentTournament" asp-route-id="@t.Id"
                  class="btn details-btn">View</a>
            </div>
          }
          @if (!tournaments.Any(t => t != null)) {
            <p>No tournaments.</p>
          }
        </div>
      </div>

      <div id="stats" class="tab-pane fade">
        <h3>Statistics</h3>
        <div class="statistics-grid">
          <div class="card-item mb-3">
            <div class="info">
              <strong>Total Matches Played:</strong>
              <span class="ms-2">@Model.TotalMatchesPlayed</span>
            </div>
          </div>
          <div class="card-item mb-3">
            <div class="info">
              <strong>Matches Won:</strong>
              <span class="ms-2">@Model.MatchesWon</span>
            </div>
          </div>
          @if (Model.TotalMatchesPlayed > 0) {
            <div class="card-item mb-3">
              <div class="info">
                <strong>Match Win Rate:</strong>
                @{
                    double matchWinRate = (double)Model.MatchesWon / Model.TotalMatchesPlayed * 100;
                }
                <span class="ms-2">@matchWinRate.ToString("F2")%</span>
              </div>
            </div>
          } else {
            <div class="card-item mb-3">
              <div class="info">
                <strong>Match Win Rate:</strong>
                <span class="ms-2">N/A</span>
              </div>
            </div>
          }

          <hr style="border-color: var(--primary-light); margin: 2rem 0;" />

          <div class="card-item mb-3">
            <div class="info">
              <strong>Total Tournaments Played:</strong>
              <span class="ms-2">@Model.TotalTournamentsPlayed</span>
            </div>
          </div>
          <div class="card-item mb-3">
            <div class="info">
              <strong>Tournaments Won:</strong>
              <span class="ms-2">@Model.TournamentsWon</span>
            </div>
          </div>
          @if (Model.TotalTournamentsPlayed > 0) {
            <div class="card-item mb-3">
              <div class="info">
                <strong>Tournament Win Rate:</strong>
                @{
                    double tournWinRate = (double)Model.TournamentsWon / Model.TotalTournamentsPlayed * 100;
                }
                <span class="ms-2">@tournWinRate.ToString("F2")%</span>
              </div>
            </div>
          } else {
            <div class="card-item mb-3">
              <div class="info">
                <strong>Tournament Win Rate:</strong>
                <span class="ms-2">N/A</span>
              </div>
            </div>
          }
        </div>
      </div>

      <div id="custom" class="tab-pane fade">
        <h3>Custom Games</h3>
        <div class="games-list">
          @foreach (var g in customGames) {
            <div class="card-item">
              <div class="info">
                <strong>@g.Title</strong><br/>
                By @g.Author.Username – Players: @g.MaxPlayers
              </div>
              <a asp-controller="Games" asp-action="Details" asp-route-id="@g.Id" class="btn details-btn">
                View
              </a>
            </div>
          }
          @if (!customGames.Any()) {
            <p>No custom games.</p>
          }
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="followersModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5>Followers</h5>
          <button class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          @foreach (var u in await followerService.GetFollowers(Model.User.Id)) {
            <div class="follower-item justify-content-between" data-user-id="@u.Id">
              <div class="user-info">
                @if (u.Picture == 0) {
                  <div class="user-avatar">@u.Username[0].ToString().ToUpper()</div>
                } else {
                  <img class="user-avatar" src="~/images/avatars/avatar-@(u.Picture).png" alt="@u.Username" />
                }
                <span>@u.Username</span>
              </div>
              <a asp-controller="Account" asp-action="Profile" asp-route-id="@u.Id" class="btn details-btn btn-sm">View</a>
            </div>
          }
        </div>
      </div>
    </div>
  </div>

  <div class="modal fade" id="followingModal" tabindex="-1">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5>Following</h5>
          <button class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          @foreach (var u in await followerService.GetFollowing(Model.User.Id)) {
            <div class="follower-item justify-content-between" data-user-id="@u.Id">
              <div class="user-info">
                @if (u.Picture == 0) {
                  <div class="user-avatar">@u.Username[0].ToString().ToUpper()</div>
                } else {
                  <img class="user-avatar" src="~/images/avatars/avatar-@(u.Picture).png" alt="@u.Username" />
                }
                <span>@u.Username</span>
              </div>
              <a asp-controller="Account" asp-action="Profile" asp-route-id="@u.Id" class="btn details-btn btn-sm">View</a>
            </div>
          }
        </div>
      </div>
    </div>
  </div>

  <div id="editPopup" class="popup-overlay" style="display:none;">
    <div class="popup-content">
      <span class="close-btn" onclick="closePopup()">&times;</span>
      <h3>Edit Profile</h3>
      <div id="editMessage" class="mb-3"></div>
      <form id="editForm" method="post" asp-controller="Account" asp-action="EditProfile">
        <input type="hidden" name="userId" value="@Model.User.Id" />
        <div class="mb-2">
          <label>Username:</label>
          <input type="text" name="username" value="@Model.User.Username" class="form-control" />
        </div>
        <div class="mb-2">
          <label>Select Profile Picture:</label>
          <div class="avatar-selection">
            @for (int i = 1; i <= 8; i++) {
              bool isChecked = (Model.User.Picture == i);
              <label>
                <input type="radio" name="photoId" value="@i" @(isChecked ? "checked" : "") hidden onchange="selectAvatar(this)" />
                <img src="~/images/avatars/avatar-@(i).png" class="avatar-option @(isChecked? "selected" : "")" data-index="@i" />
              </label>
            }
          </div>
        </div>
        <div class="mb-2">
          <div>
            <label>Old password:</label>
            <input type="password" name="oldPassword" class="form-control"/>
          </div>
          <div class="mb-2">
            <label>New password:</label>
            <input type="password" name="newPassword" class="form-control"/>
          </div>
          <div class="mb-2">
            <label>Confirm password:</label>
            <input type="password" name="confirmPassword" class="form-control"/>
          </div>
        </div>
        <button type="submit" class="btn btn-primary mt-2">Save</button>
      </form>
    </div>
  </div>

  <script>
    function toggleFavorite(gameId, element) {
      $.ajax({
        type: 'POST',
        url: '/Games/togglefavorite/' + gameId,
        success: function (response) {
          let icon = element.querySelector("i");
          if (icon.classList.contains("fa-solid")) {
            icon.classList.remove("fa-solid");
            icon.classList.add("fa-regular");
          } else {
            icon.classList.remove("fa-regular");
            icon.classList.add("fa-solid");
          }
        },
        error: function () {
          alert("Error on changing the favorite status of the game. Reload and try again!");
        }
      });
    }

    function follow(id) {
      $.ajax({
        type: 'POST',
        url: '/follower/follow/' + id,
        success: function () {
          window.location.reload();
        },
        error: function () {
          alert("Error on following the user. Please try again!");
        }
      });
    }

    function unfollow(id) {
      $.ajax({
        type: 'POST',
        url: '/follower/unfollow/' + id,
        success: function () {
          window.location.reload();
        },
        error: function () {
          alert("Error on unfollowing the user. Please try again!");
        }
      });
    }

    function setupFilter(selectMonthId, selectYearId, itemClass) {
      const monthSel = document.getElementById(selectMonthId);
      const yearSel = document.getElementById(selectYearId);
      function filter() {
        const m = monthSel.value;
        const y = yearSel.value;
        document.querySelectorAll('.' + itemClass).forEach(el => {
          const em = el.getAttribute('data-month');
          const ey = el.getAttribute('data-year');
          let show = true;
          if (m && em !== m) show = false;
          if (y && ey !== y) show = false;
          el.style.display = show ? '' : 'none';
        });
      }
      monthSel.addEventListener('change', filter);
      yearSel.addEventListener('change', filter);
    }

    function editProfile() {
      document.getElementById("editPopup").style.display = "flex";
    }

    function closePopup() {
      document.getElementById("editPopup").style.display = "none";
    }

    function selectAvatar(radio) {
      document.querySelectorAll('.avatar-option').forEach(img => img.classList.remove('selected'));
      var idx = radio.value;
      document.querySelector('.avatar-option[data-index="' + idx + '"]').classList.add('selected');
    }

    $(document).ready(function() {
      setupFilter('matchMonthFilter', 'matchYearFilter', 'match-item');
      setupFilter('tournMonthFilter', 'tournYearFilter', 'tourn-item');

      $('#editForm').on('submit', function(e) {
        e.preventDefault();

        var data = $(this).serializeArray();
        var pwd = data.find(f => f.name === 'newPassword').value;
        var cpw = data.find(f => f.name === 'confirmPassword').value;
        var editMessageDiv = $('#editMessage');

        if ((pwd || cpw) && pwd !== cpw) {
          editMessageDiv
            .removeClass('success error')
            .addClass('error')
            .text('Passwords do not match')
            .show();
          return;
        }

        $.ajax({
          url: '/Account/EditProfile',
          type: 'POST',
          data: data,
          success: function(response) {
            if (response.success) {
              editMessageDiv
                .removeClass('error')
                .addClass('success')
                .text(response.message)
                .show();

              setTimeout(() => {
                location.reload();
              }, 1000);
            } else {
              editMessageDiv
                .removeClass('success')
                .addClass('error')
                .text(response.message)
                .show();
            }
          },
          error: function(xhr, status, error) {
            editMessageDiv
              .removeClass('success error')
              .addClass('error')
              .text('Error updating profile. Please try again.')
              .show();
          }
        });
      });
    });
  </script>
</body>
</html>
