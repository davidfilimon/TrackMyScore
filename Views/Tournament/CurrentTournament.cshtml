@model TournamentModel
@using TrackMyScore.Services
@inject UserService userService

@{
    Layout = "_Layout";
    var tour = Model.Tournament;
    var singlePlayers = Model.SinglePlayers ?? Enumerable.Empty<Player>();
    var teamPlayers = Model.TeamPlayers ?? Enumerable.Empty<TeamPlayer>();
    var teams = Model.Teams ?? Enumerable.Empty<Team>();
    var matches = Model.Matches;
    var maxCompletedStage = matches.Where(m => m.Stage > 0).Any()
        ? matches.Where(m => m.Stage > 0).Max(m => m.Stage)
        : 1;
    int totalRounds = Math.Max(tour.Stage, maxCompletedStage);
    string tournamentWinner = Model.TournamentWinner;
    ViewData["Title"] = tour.Name;
}

<!DOCTYPE html>
<meta charset="utf-8" />
<title>@ViewData["Title"] - TrackMyScore</title>
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet" />
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<style>
    <style>
    :root {
      --primary-dark: #1A3C2A;
      --primary:      #2A5940;
      --primary-light:#3B7A5A;
      --accent-gold:  #D4AF37;
      --accent-gold-light:#F0D875;
      --card-bg:      #234134;
      --text-light:   #E8F5E9;
      --text-muted:   #A7C0A7;
      --error:        #CF6679;
      --success:      #4CAF50;
      --bracket-line: #3B7A5A;
      --spacing:      8px;
    }

    body {
      background: var(--primary-dark);
      color: var(--text-light);
      min-height: 100vh;
    }

    .tournament-page {
      display: grid;
      grid-template-columns: 280px 1fr 280px;
      gap: calc(var(--spacing)*2);
      padding: calc(var(--spacing)*2);
    }

    .details-card {
      background: var(--card-bg);
      border-radius: 12px;
      padding: calc(var(--spacing)*3);
      box-shadow: 0 4px 12px rgba(0,0,0,.2);
    }
    .tournament-title {
      color: var(--accent-gold);
      font-size: 1.4rem;
      margin-bottom: calc(var(--spacing)*2);
      border-bottom: 2px solid var(--primary-light);
      padding-bottom: calc(var(--spacing)/2);
    }
    .info-grid { display: grid; gap: calc(var(--spacing)*1); }
    .info-item {
        display: flex; align-items: center; gap: calc(var(--spacing)/2);
        background: var(--primary); padding: calc(var(--spacing));
        border-radius: 6px;
    }
    .info-item i {
        color: var(--accent-gold);
    }

    .winner-banner {
        margin: calc(var(--spacing)*2) 0;
        padding: calc(var(--spacing));
        background: rgba(212,175,55,.2);
        border-radius: 6px;
        display: flex; align-items:center; gap: .5rem;
        color: var(--accent-gold);
    }

    .tournament-actions {
        margin-top: calc(var(--spacing)*2);
        display: flex; flex-wrap: wrap; gap: calc(var(--spacing));
    }
    .tournament-actions .btn {
        flex: 1;
        min-width: 120px;
    }

    .match-competitor {
        padding: 4px;
    }
    .match-competitor.winner {
        background: var(--accent-gold-light);
        color: var(--primary-dark);
        font-weight: bold;
        border-radius: 4px;
    }

    .participants-card h2 {
      color: var(--accent-gold);
      font-size: 1.3rem;
      margin-bottom: calc(var(--spacing)*1.5);
      display: flex; align-items:center; gap: .5rem;
    }

    .participants-list,
    .teams-list {
      max-height: 300px;
      overflow-y: auto;
      padding-right: 4px;
    }

    .participant-card {
      background: var(--card-bg);
      border-radius: 8px;
      padding: calc(var(--spacing) * 1);
      box-shadow: 0 2px 6px rgba(0,0,0,0.3);
      display: flex;
      align-items: center;
      gap: calc(var(--spacing) / 2);
      color: var(--text-light);
    }

    .participant-card i {
      font-size: 1.2rem;
      color: var(--accent-gold);
    }

    .participant-item,
    .team-item {
      margin-bottom: var(--spacing);
    }

    .team-header {
      display: flex; align-items:center; gap: .5rem;
      background: var(--primary-light); padding: calc(var(--spacing));
      border-top-left-radius:6px; border-top-right-radius:6px;
    }
    .team-header h3 { color: var(--accent-gold); margin:0; }
    .team-members .team-member {
      padding: calc(var(--spacing));
      border:1px solid var(--primary-light);
      border-radius: 5px;
    }

    .bracket-section {
      grid-column:1 / -1;
      margin-top: calc(var(--spacing)*3 + 20px);
      background-color: var(--card-bg);
      border-radius: 12px;
      padding: calc(var(--spacing) * 4);
      box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
    }
    .bracket-title {
      text-align:center;
      color: var(--accent-gold);
      font-size:1.5rem;
      margin-bottom: calc(var(--spacing)*2);
    }
    .bracket-subtitle {
      text-align: center;
      color: var(--accent-gold-light);
      font-size: 1rem;
      margin-bottom: calc(var(--spacing) * 1.5);
    }
    .bracket-header-row {
      display: grid;
      grid-auto-flow: column;
      grid-auto-columns: minmax(260px, max-content);
      column-gap: 1.5rem;
      padding: 0 2rem;
      margin-bottom: calc(var(--spacing) * 2);
    }
    .round-header-label {
      text-align: center;
      color: var(--accent-gold);
      font-weight: bold;
    }
    .bracket-container {
      display: grid;
      grid-auto-flow: column;
      grid-auto-columns: minmax(260px, max-content);
      row-gap: 1rem;
      column-gap: 1.5rem;
      overflow-x: auto;
      padding: 20px 2rem 2rem;
      align-items: start;
    }
    .match-wrapper {
      position: relative;
      z-index: 1;
    }
    .match-wrapper::before {
      content: "";
      position: absolute;
      top: 50%;
      left: -12px;
      width: 12px;
      height: 2px;
      background: var(--bracket-line);
      transform: translateY(-50%);
      z-index: 0;
    }
    .match-wrapper::after {
      content: "";
      position: absolute;
      left: -12px;
      top: 0;
      width: 2px;
      height: calc(100% + var(--spacing));
      background: var(--bracket-line);
      z-index: 0;
    }
    .round-matches .match-wrapper:nth-child(2n-1)::after {
      clip-path: inset(0 0 calc(50% + var(--spacing)) 0);
    }
    .round-matches .match-wrapper:nth-child(2n)::after {
      clip-path: inset(calc(50% + var(--spacing)) 0 0 0);
    }
    .match-card {
      background: var(--card-bg);
      border-radius:6px;
      overflow:hidden;
      transition: transform .2s;
      z-index: 1;
      position: relative;
    }
    .match-card:hover { transform: translateY(-2px); }
    .match-header {
      background: var(--primary);
      padding: calc(var(--spacing));
    }
    .match-header a {
      color: var(--text-light);
      text-decoration:none;
      font-weight:600;
    }
    .match-info {
      padding: calc(var(--spacing));
    }
    .match-winner { color: var(--accent-gold); font-weight:600; }
    .match-status { font-style:italic; font-size:.85rem; opacity:.8; }
    .status-waiting  { color: var(--text-muted); }
    .status-ongoing  { color: var(--accent-gold); }
    .status-completed{ color: var(--success); }

    .modal-content {
      background: var(--card-bg);
      color: var(--text-light);
    }
    .modal-header .btn-close {
      filter: invert(1);
    }
    .form-control, .form-select {
      background: var(--primary-dark)!important;
      border-color: var(--primary)!important;
      color: var(--text-light)!important;
    }
    .form-control:focus, .form-select:focus {
      border-color: var(--accent-gold)!important;
      box-shadow:0 0 0 .25rem rgba(212,175,55,.25)!important;
    }

    .winner-card {
      background: var(--card-bg);
      border-radius: 12px;
      padding: calc(var(--spacing)*3);
      box-shadow: 0 4px 12px rgba(0,0,0,.2);
    }

    .winner-card h2 {
      color: var(--accent-gold);
      font-size: 1.3rem;
      margin-bottom: calc(var(--spacing)*1.5);
      display: flex; align-items:center; gap: .5rem;
    }

    .winner-name {
      font-size: 1.2rem;
      color: var(--text-light);
      font-weight: 600;
    }

    .winner-pending {
      font-style: italic;
      color: var(--text-muted);
    }

    .alert-fixed {
      position: fixed !important;
      top: 120px !important;
      left: 50% !important;
      transform: translate(-50%, -50%) !important;
      z-index: 99999 !important;
      width: auto !important;
      min-width: 300px !important;
      max-width: 80% !important;
    }

    .game-name{
        text-decoration: none;
        color: inherit;
        font-weight: bold;
    }

    .game-name:hover{
        color: var(--accent-gold);
    }

    @@media (max-width: 767.98px) {
        .tournament-page {
            grid-template-columns: 1fr;
            gap: calc(var(--spacing) * 3);
            padding: var(--spacing);
        }

        .bracket-section {
            grid-column: auto;
            padding: calc(var(--spacing) * 2);
            margin-top: calc(var(--spacing) * 2);
        }

        .bracket-header-row {
            padding: 0 1rem;
            grid-auto-columns: minmax(200px, max-content); 
            column-gap: 1rem;
            overflow-x: auto;
        }

        .bracket-container {
            grid-auto-columns: minmax(200px, max-content);
            column-gap: 1rem;
            padding: 10px 1rem 1rem;
        }

        .match-wrapper::before {
            left: -8px;
            width: 8px;
        }
        .match-wrapper::after {
            left: -8px;
        }

        .details-card,
        .participants-card,
        .winner-card {
            padding: calc(var(--spacing) * 2);
        }

        .tournament-title,
        .participants-card h2,
        .winner-card h2 {
            font-size: 1.2rem;
            margin-bottom: var(--spacing);
        }

        .info-item {
            padding: calc(var(--spacing) / 2);
            font-size: 0.9rem;
        }

        .tournament-actions .btn {
            min-width: unset;
            width: 100%; 
        }

        .social-icons a {
            margin: 0 8px;
            font-size: 1.5rem;
        }
    }
</style>

<div id="generalWarningMessageContainer" class="alert alert-danger alert-fixed" style="display:none;">
    <span id="generalWarningMessageText"></span>
</div>
<div class="tournament-page">

    <div class="tournament-details">
        <div class="details-card">
            <h1 class="tournament-title">@tour.Name</h1>
            <div class="info-grid">
                <div class="info-item"><i class="fa-solid fa-trophy"></i><span>Reward: @tour.Reward</span></div>
                <div class="info-item"><i class="fa-solid fa-gamepad"></i><a class="game-name" asp-controller="Games" asp-action="Details" asp-route-id="@(matches.FirstOrDefault()?.Game.Id)">@(matches.FirstOrDefault()?.Game?.Title ?? "N/A")</a></div>
                <div class="info-item"><i class="fa-solid fa-calendar"></i><span>@tour.StartDate</span></div>
                <div class="info-item"><i class="fa-solid fa-font-awesome"></i><span>Mode: @(matches.FirstOrDefault()?.Mode ?? "N/A")</span></div>
                <div class="info-item"><i class="fa-solid fa-location-dot"></i><span>@tour.Location</span></div>
                <div class="info-item"><i class="fa-solid fa-users"></i><span>Exact number of players: @(tour.RoomCount*2)</span></div>
                @if(matches.FirstOrDefault()?.Mode == "team"){
                    <div class="info-item"><i class="fa-solid fa-users"></i><span>@(matches.FirstOrDefault()?.Game?.MaxPlayers ?? 0) players per team</span></div>
                }
                @if(tour.Host == Model.LoggedUser){
                <div class="info-item"><i class="fa-solid fa-key"></i><span>Code: @tour.Code</span></div>
                }
                <div class="info-item"><i class="fa-solid fa-user"></i><span>Host: @tour.Host.Username</span></div>
            </div>

            @if(!string.IsNullOrEmpty(tournamentWinner))
            {
                <div class="winner-banner"><i class="fa-solid fa-crown"></i><span>Winner: @tournamentWinner</span></div>
            }

            <div class="tournament-actions">
                @if(!tour.IsActive && string.IsNullOrEmpty(tournamentWinner))
                {
                    @if(singlePlayers.Any(p => p.User.Id == Model.LoggedUser.Id) || teamPlayers.Any(p => p.UserId == Model.LoggedUser.Id))
                    {
                        <button class="btn btn-danger" onclick="leaveTournament(@tour.Id)">
                            <i class="fa-solid fa-door-open"></i> Leave Tournament
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary" onclick="openJoinModal()">
                            <i class="fa-solid fa-right-to-bracket"></i> Join Tournament
                        </button>
                    }
                }
                @if(Model.LoggedUser==tour.Host && !Model.Tournament.IsActive && tournamentWinner == "")
                {
                    <button class="btn btn-success" onclick="startTournament()">
                        <i class="fa-solid fa-play"></i> Start Tournament
                    </button>
                    <button class="btn btn-danger" onclick="deleteTournament()">
                        <i class="fa-solid fa-trash"></i> Delete Tournament
                    </button>
                }
                @if(tour.IsActive)
                {
                    var currentStageMatches = matches.Where(m => m.Tournament == tour && m.Stage <= tour.Stage).ToList();
                    if (currentStageMatches.Where(r => r.Stage == tour.Stage).ToList().Count == 1 && tour.Stage > 1 && !currentStageMatches.Any(r => r.Stage == -1))
                    {
                        <button class="btn btn-primary" onclick="endTournament()">
                            <i class="fa-solid fa-flag-checkered"></i> End Tournament
                        </button>
                    }
                    else if(currentStageMatches.All(m => m.Stage > 0))
                    {
                        <button class="btn btn-primary" onclick="endStage(@tour.Id)">
                            <i class="fa-solid fa-forward"></i> End Stage
                        </button>
                    }
                }
            </div>
        </div>
    </div>

    <div class="participants-panel">
        <div class="participants-card">
            @if(matches.FirstOrDefault()?.Mode=="single")
            {
                <h2><i class="fa-solid fa-users"></i> Participants</h2>
                <div class="participants-list">
                    @foreach(var p in singlePlayers.DistinctBy(u => u.UserId))
                    {
                        @if (p != null && p.User != null){
                        <div class="participant-card">
                            <i class="fa-solid fa-user"></i>
                            <span>@p.User.Username</span>
                        </div>
                        }
                    }
                </div>
            }
            else
            {
                <h2><i class="fa-solid fa-users-group"></i> Teams</h2>
                <div class="teams-list">
                    @foreach(var t in teams)
                    {
                        <div class="team-item">
                            <div class="team-header">
                                <i class="fa-solid fa-users"></i><h3>@t.Name</h3>
                            </div>
                            <div class="team-members">
                                @foreach ( var p in teamPlayers
                                   .Where(tp => tp.TeamId == t.Id)
                                   .Select(tp => tp.User)
                                   .GroupBy(u => u.Id)
                                   .Select(g => g.First()) )
                                {
                                    <div class="team-member"><i class="fa-solid fa-user"></i><span>@p.Username</span></div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <div class="winner-panel">
        <div class="winner-card align-items-center">
            <h2><i class="fa-solid fa-crown"></i> Winner</h2>
            @if (!string.IsNullOrEmpty(tournamentWinner))
            {
                <div class="winner-name">@tournamentWinner</div>
            }
            else
            {
                <div class="winner-pending">Tournament is still played out or did not begin.</div>
            }
        </div>
    </div>

    @if((tour.IsActive || !string.IsNullOrEmpty(tournamentWinner) || matches.Any()) && tour.Stage > 0)
    {
    <div class="bracket-section">
    <h2 class="bracket-title">Tournament Bracket</h2>
    <div class="bracket-subtitle">Round @tour.Stage</div>
    
    <div class="bracket-container">
  @for (int rnd = 1; rnd <= totalRounds; rnd++)
  {
      // pick matches for this column
      var roundMatches = matches
          .Where(r => (r.Stage > 0 && r.Stage == rnd)
                   || (rnd == tour.Stage && r.Stage <= 0))
          .OrderBy(r => r.Id)
          .ToList();

      for (int idx = 0; idx < roundMatches.Count; idx++)
      {
          var room = roundMatches[idx];
          var stat = room.Stage switch {
            -1 => "waiting",
             0 => "ongoing",
            _  => "completed"
          };

          string singleWinnerName = "";
          string teamWinnerTeamName  = "";
          if (room.Stage > 0) {
            if (room.Mode == "single") {
              singleWinnerName = singlePlayers
                  .FirstOrDefault(p => p.Match.Id == room.Id && !p.Eliminated)?.User.Username ?? "";
            }
            else {
              teamWinnerTeamName = teamPlayers
                  .FirstOrDefault(tp => tp.MatchId == room.Id && !tp.Eliminated)?.Team.Name ?? "";
            }
          }

          // grid positioning
          int row = idx * (1 << rnd) + (1 << (rnd - 1));
          int col = rnd;
  <div class="match-wrapper" style="grid-column:@col; grid-row:@row">
    <div class="match-card @stat">
      <div class="match-header">
        <a asp-action="CurrentMatch"
           asp-controller="Match"
           asp-route-id="@room.Id">@room.Name</a>
      </div>
      <div class="match-info">
        @* list the two competitors *@
        @if (room.Mode == "single")
        {
            // pull exactly two players in this match
            var playersInMatch = singlePlayers
                .Where(p => p.Match.Id == room.Id)
                .OrderBy(p => p.Id)
                .ToList();

            int maxScore = room.Stage > 0 && playersInMatch.Any()
                ? playersInMatch.Max(p => p.Score)
                : int.MinValue;

            foreach (var p in playersInMatch)
            {
                var isWinner = room.Stage > 0 && p.Score == maxScore;
                <div class="match-competitor @(isWinner ? "winner" : "")">
                  @p.User.Username
                  @if (isWinner) { <i class="fa-solid fa-trophy"></i> }
                </div>
            }
        }
        else
        {
            // pull exactly two distinct teams
            var teamsInMatch = teamPlayers
                .Where(tp => tp.MatchId == room.Id)
                .GroupBy(tp => tp.Team)
                .Select(g => new {
                    Team = g.Key,
                    Members = g.Select(x => x.User.Username).ToList()
                })
                .OrderBy(t => t.Team.Id)
                .ToList();
            foreach (var t in teamsInMatch)
            {
                var isWinner = teamWinnerTeamName == t.Team.Name;
                <div class="match-competitor @(isWinner ? "winner" : "")">
                  <strong>@t.Team.Name</strong>
                  <small>(@string.Join(", ", t.Members))</small>
                  @if (isWinner) { <i class="fa-solid fa-trophy"></i> }
                </div>
            }
        }

        <div class="match-status">
          @(room.Stage == -1 ? "Waiting"
            : room.Stage == 0   ? "In Progress"
                                : "Completed")
        </div>
      </div>
    </div>
  </div>
      }
  }
</div>


</div>
}
</div>

<div class="modal fade" id="joinModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Join Tournament</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>

            @if (matches.FirstOrDefault()?.Mode == "single")
            {
                <div class="modal-body">
                    <form id="joinFormSingle" onsubmit="event.preventDefault(); joinTournamentSingle(@tour.Id, $('#code').val());">
                        <div class="mb-3">
                            <label class="form-label">Tournament Code</label>
                            <input type="text" id="code" class="form-control" required />
                        </div>
                        <button type="submit" class="btn btn-primary">Join</button>
                    </form>
                </div>
            }
            else
            {
                <div class="modal-body">
                    <form id="joinFormTeam" onsubmit="event.preventDefault(); tryJoinTeam();">
                        <div class="mb-3">
                            <label class="form-label">Tournament Code</label>
                            <input type="text" id="code" class="form-control" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Team Name</label>
                            <input type="text" id="teamName" class="form-control" required />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Select Teammates</label>

                            @if (Model.MutualFollowers?.Any() == true)
                            {
                                <div class="form-check">
                                    @foreach (var u in Model.MutualFollowers)
                                    {
                                        <div class="mb-1">
                                            <input
                                                class="form-check-input"
                                                type="checkbox"
                                                name="teammates"
                                                value="@u.Id"
                                                id="teammate_@u.Id" />
                                            <label
                                                class="form-check-label"
                                                for="teammate_@u.Id">@u.Username</label>
                                        </div>
                                    }
                                </div>

                                <button type="submit" class="btn btn-primary mt-3">Create Team</button>
                            }
                            else
                            {
                                <div class="alert alert-warning">
                                    No mutual followers available.
                                </div>
                                <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                            }
                        </div>
                    </form>
                </div>
            }
        </div>
    </div>
</div>

<script>
    function closeModal() {
        $('#joinModal').modal('hide');
    }

    function openJoinModal() {
        $('#joinModal').modal('show');
    }

    function startTournament() {
        $.ajax({
            url: '/Tournament/Start',
            type: 'POST',
            data: { id: @Model.Tournament.Id },
            success: function(response) {
                if(response.success){
                    window.location.reload();
                } else {
                    showTemporaryPopup(response.message, true);
                }
            },
            error: function(xhr, status, error) {
                console.error('Error starting tournament:', error);
            }
        });
    }

    function deleteTournament() {
    if (!confirm('Are you sure you want to delete this tournament?')) {
        return;
    }

    $.ajax({
        url: '/Tournament/Delete',
        type: 'POST',
        headers: {
        'X-Requested-With': 'XMLHttpRequest'
        },
        data: { id: @Model.Tournament.Id },
        success: function(response) {
        if (response.success) {
            // go back to list view
            window.location.href = '/Tournament/List';
        } else {
            showTemporaryPopup(response.message, true);
        }
        },
        error: function(xhr, status, error) {
        console.error('Error deleting tournament:', error);
        showTemporaryPopup('Unexpected error deleting tournament.', true);
        }
    });
    }


    function joinTournamentSingle(id, code) {
        $.ajax({
            url: '/Tournament/JoinSingle',
            type: 'POST',
            data: { id, code },
            success: function(response) {
                if(response.success){
                    window.location.reload();
                } else {
                    showTemporaryPopup(response.message, true);
                }
            },
            error: function(xhr, status, error) {
                console.error('Error joining tournament:', error);
            }
        });
    }

    function joinTournamentTeam(id, code, teammates, teamName) {
        $.ajax({
            url: '/Tournament/JoinTeam',
            type: 'POST',
            data: { id, code, teammates, teamName },
            success: function(response) {
                if(response.success){
                    window.location.reload();
                } else {
                    showTemporaryPopup(response.message, true);
                }
            },
            error: function(xhr, status, error) {
                console.error('Error joining tournament:', error);
            }
        });
    }

    function leaveTournament(id) {
        $.ajax({
            url: '/Tournament/Leave',
            type: 'POST',
            data: { id },
            success: function(response) {
                if(response.success){
                    window.location.reload();
                } else {
                    showTemporaryPopup(response.message, true);
                }
            },
            error: function(xhr, status, error) {
                console.error('Error leaving tournament:', error);
            }
        });
    }

    function endStage(tournamentId) {
        $.ajax({
            url: "/Tournament/EndStage",
            type: "POST",
            data: { id: tournamentId },
            success: function(response) {
                if(response.success){
                    window.location.reload();
                } else {
                    showTemporaryPopup(response.message, true);
                }
            },
            error: function(xhr, status, error) {
                console.error('Error ending the stage:', error);
            }
        });
    }

    function endTournament() {
        if (confirm('Are you sure you want to end this tournament?')) {
            $.ajax({
                url: "/Tournament/EndTournament",
                type: "POST",
                data: { tournamentId: @Model.Tournament.Id },
                success: function(response) {
                    if(response.success){
                        window.location.reload();
                    } else {
                        showTemporaryPopup(response.message, true);
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error ending the tournament:', error);
                }
            });
        }
    }

    function showTemporaryPopup(message, isError = true) {
        const popupContainer = document.getElementById("generalWarningMessageContainer");
        const popupText = document.getElementById("generalWarningMessageText");
        if (!popupContainer || !popupText) return;
        popupText.innerText = message;
        if (isError) {
            popupContainer.className = "alert alert-danger alert-fixed";
        } else {
            popupContainer.className = "alert alert-success alert-fixed";
        }
        popupContainer.style.display = "block";
        setTimeout(() => {
            popupContainer.style.display = "none";
            popupText.innerText = "";
        }, 5000);
    }

    var existingTeams = [
        @foreach(var t in Model.Teams) {
        @: "@t.Name",
        }
    ].map(function(s){ return s.trim().toLowerCase(); });

    function tryJoinTeam() {
        var teamName    = $('#teamName').val().trim();
        var code        = $('#code').val().trim();
        var teammateIds = $('input[name="teammates"]:checked')
                              .map(function() { return this.value; })
                              .get();

        if (!teamName) {
            showTemporaryPopup("Please enter a team name.", true);
            return;
        }
        if (existingTeams.indexOf(teamName.toLowerCase()) !== -1) {
            showTemporaryPopup("A team with that name has already joined.", true);
            return;
        }
        if (teammateIds.length === 0) {
            showTemporaryPopup("Please select at least one teammate.", true);
            return;
        }

        joinTournamentTeam(
            @tour.Id,
            code,
            teammateIds,
            teamName
        );
    }
</script>
