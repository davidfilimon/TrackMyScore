@model RoomListModel

@{
    ViewData["Title"] = "Room List";
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - TrackMyScore</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
</head>
<style>
    :root {
        --primary-dark: #1A3C2A;
        --primary: #2A5940;
        --primary-light: #3B7A5A;
        --accent-gold: #D4AF37;
        --accent-gold-light: #F0D875;
        --accent-wood: #966F33;
        --text-light: #E8F5E9;
        --text-muted: #ffffff;
        --card-bg: #234134;
        --input-bg: #1A3C2A;
        --input-border: #3B7A5A;
        --input-focus: #D4AF37;
        --error: #CF6679;
        --success: #4CAF50;
        --spacing-unit: 8px;
    }

    body {
        font-family: Arial, Helvetica, sans-serif;
        background-color: var(--primary-dark);
        color: var(--text-light);
        min-height: 100vh;
        line-height: 1.5;
    }

    .container-fluid {
        max-width: 1200px; 
    }

    .header-section {
        background-color: var(--card-bg);
        border-radius: 12px;
        padding: calc(var(--spacing-unit) * 3);
        margin-bottom: calc(var(--spacing-unit) * 4);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: center;
    }

    .header-section h1 {
        color: var(--text-light);
        font-weight: 600;
        margin-bottom: 0;
    }

    .btn-create-room {
        background-color: var(--accent-gold);
        border: none;
        color: var(--primary-dark);
        font-weight: 600;
        padding: calc(var(--spacing-unit) * 1.5) calc(var(--spacing-unit) * 3);
        border-radius: 8px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        text-decoration: none;
    }

    .btn-create-room:hover, .btn-create-room:focus {
        background-color: var(--accent-gold-light);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        color: var(--primary-dark);
    }

    .room-section {
        background-color: var(--card-bg);
        border-radius: 12px;
        padding: calc(var(--spacing-unit) * 4);
        margin-bottom: calc(var(--spacing-unit) * 4);
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
    }

    .room-section h3 {
        color: var(--text-light);
        font-weight: 600;
        margin-bottom: calc(var(--spacing-unit) * 3);
    }

    .room-card {
        background-color: var(--primary);
        border-radius: 10px;
        padding: calc(var(--spacing-unit) * 3);
        margin-bottom: calc(var(--spacing-unit) * 3);
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
        position: relative; 
    }

    .room-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.3);
    }

    .room-card-title {
        font-size: 1.4rem;
        font-weight: 600;
        color: var(--text-light);
        margin-bottom: calc(var(--spacing-unit) * 1.5);
    }

    .room-info {
        font-size: 0.95rem;
        margin-bottom: calc(var(--spacing-unit) * 1);
        color: var(--text-muted);
    }

    .room-info strong {
        color: var(--text-light);
    }

    .room-players {
        font-size: 1rem;
        font-weight: 500;
        color: var(--accent-gold);
        margin-top: calc(var(--spacing-unit) * 1.5);
        margin-bottom: calc(var(--spacing-unit) * 2);
    }

    .room-status {
        font-style: italic;
        color: var(--text-muted);
        margin-top: calc(var(--spacing-unit) * 1.5);
        padding: calc(var(--spacing-unit) * 1) calc(var(--spacing-unit) * 2);
        border-radius: 6px;
        display: inline-block;
        font-weight: 500;
        text-align: center;
        width: 100%; 
    }
    
    .status-waiting {
        background-color: rgba(212, 175, 55, 0.2);
        color: var(--accent-gold);
        border: 1px solid var(--accent-gold);
    }

    .status-ended {
        background-color: rgba(207, 102, 121, 0.2);
        color: var(--error);
        border: 1px solid var(--error);
    }

    .status-ongoing {
        background-color: rgba(76, 175, 80, 0.2);
        color: var(--success);
        border: 1px solid var(--success);
    }

    .btn-view-details {
        background-color: var(--accent-gold);
        border: none;
        color: var(--primary-dark);
        font-weight: 600;
        padding: calc(var(--spacing-unit) * 1.5) calc(var(--spacing-unit) * 3);
        border-radius: 8px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        text-decoration: none;
        display: block;
        text-align: center;
        margin-top: calc(var(--spacing-unit) * 2);
    }

    .btn-view-details:hover {
        background-color: var(--accent-gold-light);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        color: var(--primary-dark);
    }

    .no-rooms-message {
        text-align: center;
        padding: calc(var(--spacing-unit) * 3);
        color: var(--text-muted);
        font-style: italic;
    }

    .search-bar1 {
        width: 50%;
    }

    .search-input1 {
        background-color: var(--input-bg);
        border: 2px solid var(--input-border);
        color: var(--text-light);
        padding: calc(var(--spacing-unit) * 1.5);
        border-radius: 8px;
        transition: all 0.3s ease;
    }

    .search-input1:focus {
        background-color: var(--input-bg);
        border-color: var(--input-focus);
        color: var(--text-light);
        box-shadow: 0 0 0 0.2rem rgba(212, 175, 55, 0.25);
    }

    .search-input1::placeholder {
        color: var(--text-muted);
        opacity: 0.7;
    }

    .room-status{
        margin-top: 12px;
        display: block;
    }

    .horizontal-scroll {
        display: flex;
        flex-wrap: nowrap;
        overflow-x: auto;
        gap: 1rem;          
        padding-bottom: 1rem;
        scroll-snap-type: x mandatory;
    }
    .horizontal-scroll > .room-card-wrapper {
        flex: 0 0 300px;
        scroll-snap-align: start;
    }
</style>

    <div class="container-fluid">
        <div class="header-section">
            <h1>Active Rooms</h1>
            <div class="search-bar1">
                <input type="text" id="rSearch" class="form-control search-input1" placeholder="Search rooms by name...">
            </div>
            <a class="btn btn-create-room" asp-action="Create" asp-controller="Room">
                <i class="fa-solid fa-plus me-2"></i> Create Room
            </a>
        </div>
    <div class="room-section mb-4">
        <h3>Available Rooms to Join</h3>
        <div class="horizontal-scroll">
            @if (Model.RoomList.Any())
            {
            foreach (var room in Model.RoomList)
            {
                var playersInRoom = Model.JoinedPlayersInRoomList.TryGetValue(room.Id, out var list)
                                    ? list
                                    : new List<User>();

                <div class="room-card-wrapper">
                <div class="room-card">
                    <div class="room-card-title">@room.Name</div>
                    <div class="room-info"><strong>Host:</strong> @room.Host.Username</div>
                    <div class="room-info"><strong>Game:</strong> @room.Game.Title</div>
                    <div class="room-info"><strong>Description:</strong> @room.Game.Description</div>

                    <div class="room-players">
                    @if (room.Tournament == null && room.Mode == "pending")
                    {
                        <p><strong>Players:</strong> @playersInRoom.Count / @room.Game.MaxPlayers (single mode) - @(Math.Pow(room.Game.MaxPlayers, 2)) (team mode)</p>
                    }
                    else if (room.Tournament == null && room.Mode == "single"){
                        <p><strong>Players:</strong> @playersInRoom.Count / @room.Game.MaxPlayers (single mode)</p>

                    } 
                    else if (room.Tournament == null && room.Mode == "single"){
                        <p><strong>Players:</strong> @playersInRoom.Count / @(Math.Pow(room.Game.MaxPlayers, 2)) (team mode)</p>
                    }
                    </div>

                    <div class="room-status @(room.Stage == -1 ? "status-waiting"
                                            : room.Stage == 0   ? "status-ongoing"
                                                                : "status-ended")">
                    @if (room.Stage == -1)
                    {
                        <i class="fa-solid fa-clock me-1">Waiting for host to start</i>
                        
                    }
                    else if (room.Stage == 0)
                    {
                        <i class="fa-solid fa-play me-1">Ongoing match</i>
                        
                    }
                    else
                    {
                        <i class="fa-solid fa-flag-checkered me-1">Match ended</i>
                        
                    }
                    </div>

                    <a class="btn btn-view-details mt-3"
                    asp-controller="Room"
                    asp-action="CurrentRoom"
                    asp-route-id="@room.Id">
                    <i class="fa-solid fa-arrow-right me-2"></i> View Details
                    </a>
                </div>
                </div>
            }
            }
            else
            {
            <div class="col-12">
                <div class="no-rooms-message">No rooms available to join.</div>
            </div>
            }
        </div>
    </div>

       <div class="room-section">
        <h3>Your Joined or Hosted Rooms</h3>
        <div class="horizontal-scroll">
            @if (Model.JoinedRooms.Any())
            {
            foreach (var jr in Model.JoinedRooms)
            {
                var room = jr.Room;

                var playersInMyRoom = Model.JoinedPlayers.TryGetValue(room.Id, out var list)
                                        ? list
                                        : new List<User>();

                <div class="room-card-wrapper">
                <div class="room-card">
                    <div class="room-card-title">@room.Name</div>
                    <div class="room-info"><strong>Host:</strong> @room.Host.Username</div>
                    <div class="room-info"><strong>Game:</strong> @room.Game.Title</div>
                    <div class="room-info"><strong>Description:</strong> @room.Game.Description</div>

                    <div class="room-players">
                    @if (room.Tournament == null && room.Mode == "pending")
                    {
                        <p><strong>Players:</strong> @playersInMyRoom.Count / @room.Game.MaxPlayers (single mode) - @(Math.Pow(room.Game.MaxPlayers, 2)) (team mode)</p>
                    }
                    else if (room.Tournament == null && room.Mode == "single"){
                        <p><strong>Players:</strong> @playersInMyRoom.Count / @room.Game.MaxPlayers (single mode)</p>

                    } 
                    else if (room.Tournament == null && room.Mode == "single"){
                        <p><strong>Players:</strong> @playersInMyRoom.Count / @(Math.Pow(room.Game.MaxPlayers, 2)) (team mode)</p>
                    }
                    </div>

                    <div class="room-status @(room.Stage == -1 ? "status-waiting"
                                            : room.Stage == 0   ? "status-ongoing"
                                                                : "status-ended")">
                    @if (room.Stage == -1)
                    {
                        <i class="fa-solid fa-clock me-1">Waiting for host to start</i>
                    }
                    else if (room.Stage == 0)
                    {
                        <i class="fa-solid fa-play me-1">Ongoing match</i> 
                    }
                    else
                    {
                        <i class="fa-solid fa-flag-checkered me-1">Match ended</i>
                    }
                    </div>

                    <a class="btn btn-view-details mt-3"
                    asp-controller="Room"
                    asp-action="CurrentRoom"
                    asp-route-id="@room.Id">
                    <i class="fa-solid fa-arrow-right me-2"></i> View Details
                    </a>
                </div>
                </div>
            }
            }
            else
            {
            <div class="col-12">
                <div class="no-rooms-message">You haven't joined or hosted any active rooms.</div>
            </div>
            }
        </div>
        </div>

<script>
    // room search function
    document.addEventListener('DOMContentLoaded', function () {
        const searchInput = document.getElementById('rSearch');
        const roomCols   = document.querySelectorAll('.room-section .row > [class*="col-"]');

        searchInput.addEventListener('keyup', function () {
        const term = searchInput.value.trim().toLowerCase();

        roomCols.forEach(col => {
            const titleEl = col.querySelector('.room-card-title');
            if (!titleEl) return;

            const titleText = titleEl.textContent.trim().toLowerCase();
            col.style.display = titleText.includes(term) ? '' : 'none';
        });
        });
    });
</script>
