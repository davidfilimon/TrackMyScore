@model CurrentRoomModel
@{
    int joinedPlayers = Model.Players.Count;
    var loggedUser = Model.LoggedUser;
    var players = Model.Players;
    var participants = Model.Participants;
    var teams = Model.Teams;
    var room = Model.Room;
    var jPlayers = Model.JoinedPlayers;
    ViewData["Title"] = Model.Room.Name;
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - TrackMyScore</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>
<style>
    :root {
        --primary-dark: #1A3C2A;
        --primary: #2A5940;
        --primary-light: #3B7A5A;
        --accent-gold: #D4AF37;
        --accent-gold-light: #F0D875;
        --accent-wood: #966F33;
        --text-light: #E8F5E9;
        --text-muted: #ffffff;
        --card-bg: #234134;
        --input-bg: #1A3C2A;
        --input-border: #3B7A5A;
        --input-focus: #D4AF37;
        --error: #CF6679;
        --success: #4CAF50;
        --spacing-unit: 8px;
    }

    body {
        font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;
        background-color: var(--primary-dark);
        color: var(--text-light);
        min-height: 100vh;
        line-height: 1.5;
        padding: calc(var(--spacing-unit) * 4);
        margin-top: var(--spacing-unit);
    }

    .container-fluid {
        max-width: 1200px;
        margin: auto;
    }

    .room-details-section {
        background-color: var(--card-bg);
        border-radius: 12px;
        padding: calc(var(--spacing-unit) * 4);
        margin-bottom: calc(var(--spacing-unit) * 4);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    }

    .room-details-section p {
        font-size: 1.1rem;
        margin-bottom: calc(var(--spacing-unit) * 1.5);
        color: var(--text-muted);
    }

    .room-details-section p strong {
        color: var(--text-light);
    }

    .room-details-section h2, .room-details-section h3 {
        color: var(--accent-gold);
        margin-bottom: calc(var(--spacing-unit) * 3);
        font-weight: 600;
    }

    .status-message {
        padding: calc(var(--spacing-unit) * 1.5);
        border-radius: 8px;
        margin-top: calc(var(--spacing-unit) * 3);
        margin-bottom: calc(var(--spacing-unit) * 3);
        font-weight: 500;
        text-align: center;
    }

    .status-waiting {
        background-color: rgba(212, 175, 55, 0.2);
        color: var(--accent-gold);
        border: 1px solid var(--accent-gold);
    }

    .status-ended {
        background-color: rgba(207, 102, 121, 0.2);
        color: var(--error);
        border: 1px solid var(--error);
    }

    .status-ongoing {
        background-color: rgba(76, 175, 80, 0.2);
        color: var(--success);
        border: 1px solid var(--success);
    }

    .btn-action {
        background-color: var(--accent-gold);
        border: none;
        color: var(--primary-dark);
        font-weight: 600;
        padding: calc(var(--spacing-unit) * 1.5) calc(var(--spacing-unit) * 3);
        border-radius: 8px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        text-decoration: none;
        margin-right: calc(var(--spacing-unit) * 2);
    }

    .btn-action:hover {
        background-color: var(--accent-gold-light);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        color: var(--primary-dark);
    }

    .btn-danger-custom {
        background-color: var(--error);
        border: none;
        color: var(--text-light);
        font-weight: 600;
        padding: calc(var(--spacing-unit) * 1.5) calc(var(--spacing-unit) * 3);
        border-radius: 8px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        text-decoration: none;
    }

    .btn-danger-custom:hover {
        background-color: darken(var(--error), 10%);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        color: var(--text-light);
    }

    .btn-dark-custom {
        background-color: var(--primary);
        border: none;
        color: var(--text-light);
        font-weight: 600;
        padding: calc(var(--spacing-unit) * 1.5) calc(var(--spacing-unit) * 3);
        border-radius: 8px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        text-decoration: none;
    }

    .btn-dark-custom:hover {
        background-color: var(--primary-light);
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        color: var(--text-light);
    }


    .form-check-label {
        color: var(--text-muted);
    }

    .table {
        color: var(--text-light);
        background-color: var(--primary); 
        border-radius: 10px;
        overflow: hidden; 
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); 
    }

    .table thead {
        background-color: var(--primary-light);
    }

    .table th, .table td {
        border-color: var(--primary-dark);
        padding: calc(var(--spacing-unit) * 2);
        vertical-align: middle;
    }

    .table tbody tr:nth-child(even) {
        background-color: rgba(0, 0, 0, 0.1);
    }

    .table tbody tr:hover {
        background-color: var(--primary-light);
        transition: background-color 0.2s ease;
    }

    .table .btn {
        padding: calc(var(--spacing-unit) * 0.75) calc(var(--spacing-unit) * 1.5);
        border-radius: 6px;
        font-weight: 500;
    }

    .btn-success {
        background-color: var(--success);
        border-color: var(--success);
        color: var(--primary-dark);
    }
    .btn-success:hover {
        background-color: darken(var(--success), 10%);
        border-color: darken(var(--success), 10%);
        color: var(--primary-dark);
    }

    .btn-danger {
        background-color: var(--error);
        border-color: var(--error);
        color: var(--text-light);
    }
    .btn-danger:hover {
        background-color: darken(var(--error), 10%);
        border-color: darken(var(--error), 10%);
        color: var(--text-light);
    }


    .modal-content {
        background-color: var(--card-bg);
        color: var(--text-light);
        border-radius: 12px;
    }

    .modal-header {
        border-bottom: 1px solid var(--primary-light);
    }

    .modal-title {
        color: var(--accent-gold);
    }

    .modal-footer {
        border-top: 1px solid var(--primary-light);
    }

    .form-control, .form-select {
        background-color: var(--input-bg);
        color: var(--text-light);
        border: 1px solid var(--input-border);
    }

    .form-control:focus, .form-select:focus {
        border-color: var(--input-focus);
        box-shadow: 0 0 0 0.25rem rgba(212, 175, 55, 0.25);
        background-color: var(--input-bg);
        color: var(--text-light);
    }

    .team-card {
        background-color: var(--primary);
        border: 1px solid var(--primary-light);
        border-radius: 8px;
    }

    .team-card .card-title {
        color: var(--text-light);
    }

    .btn-close {
        filter: invert(1); 
    }

    .room-details-section .table {
        width: 100%;
        border-collapse: collapse;
        background-color: transparent; 
    }

    .room-details-section .table th,
    .room-details-section .table td {
        padding: calc(var(--spacing-unit) * 2);
        text-align: left;
    }

    .room-details-section .table thead th {
        background-color: var(--primary-dark) !important;
        color: var(--text-light)  !important;
        border-bottom: 2px solid var(--primary-light) !important;
    }

    .room-details-section .table tbody td {
        background-color: var(--primary) !important;
        color: var(--text-light) !important;
        border-bottom: 1px solid var(--primary-light) !important;
    }

    .room-details-section .table tbody tr:last-child td {
        border-bottom: none !important;
    }
    
    .room-details-section .table tbody tr:hover td {
        background-color: var(--primary-light) !important;
    }
</style>
<body>
    <div class="container-fluid">
        <div class="room-details-section">
            <h2>Room Details</h2>
            <p><strong>Room Name:</strong> @Model.Room.Name</p>
            <p><strong>Game:</strong> @Model.Room.Game.Title</p>
            <p><strong>Creator:</strong> @Model.Room.Host.Username</p>
            <p><strong>Location:</strong> @Model.Room.Location</p>

            @if (@Model.Room.Tournament == null)
            {
                <p><strong>Players:</strong> @joinedPlayers / @Model.Room.Game.MaxPlayers</p>
                <p><strong>Start Date:</strong> @Model.Room.StartDate</p>
            }
            <p><strong>Room Type:</strong> @Model.Room.Type</p>

            @if (Model.Room.Stage == -1 && Model.Room.Tournament == null)
            {
                <div class="status-message status-waiting"><i class="fa-solid fa-clock me-1"></i> Waiting for the host to start the game.</div>
            }
            else if (Model.Room.Stage == -1 && Model.Room.Tournament != null)
            {
                <div class="status-message status-waiting"><i class="fa-solid fa-clock me-1"></i> Waiting for host to start the tournament bracket.</div>
            }
            else if (Model.Room.Stage == 0)
            {
                <div class="status-message status-ongoing"><i class="fa-solid fa-play me-1"></i> There is an ongoing match.</div>
            }
            else if (Model.Room.Stage == -2)
            {
                <div class="status-message status-ended"><i class="fa-solid fa-flag-checkered me-1"></i> The game has ended.</div>
            }

            <div class="d-flex flex-wrap gap-2 mt-4">
                @if (Model.Room.Stage != -2 && (Model.Room.Tournament == null || Model.Room.Mode == "single"))
                {
                    if (Model.Room.Host != loggedUser && Model.Room.Stage == -1)
                    {
                        if (players.Contains(loggedUser))
                        {
                            <a class="btn btn-danger-custom" onclick="leave(@Model.Room.Id)"><i class="fa-solid fa-person-walking-arrow-right me-2"></i>Leave Room</a>
                        }
                        else
                        {
                            <a class="btn btn-action" onclick="join(@Model.Room.Id)"><i class="fa-solid fa-right-to-bracket me-2"></i>Join Room</a>
                        }
                    }
                    else if (Model.Room.Host == loggedUser)
                    {
                        if (Model.Room.Stage == -1)
                        {
                            <button id="startButton" class="btn btn-action" data-room-id="@Model.Room.Id" onclick="checkAndOpenModal(@Model.Room.Id)"><i class="fa-solid fa-play me-2"></i>Start Match</button>
                            @if (Model.Room.Tournament == null)
                            {
                                <form method="post" asp-action="Delete" asp-controller="Room" asp-route-roomId="@Model.Room.Id" onsubmit="return confirm('Are you sure you want to delete this room?');">
                                    <button type="submit" class="btn btn-danger-custom"><i class="fa-solid fa-trash-can me-2"></i>Delete Room</button>
                                </form>
                            }
                        }
                        else if (Model.Room.Stage == 0)
                        {
                            <button id="endMatchButton" class="btn btn-danger-custom" onclick="endMatch(@Model.CurrentMatch?.Id)"><i class="fa-solid fa-flag-checkered me-2"></i>End Match</button>
                        }
                    }
                }
                else if (Model.Room.Stage == -1 && Model.Room.Tournament != null && Model.Room.Mode == "team")
                {
                    <button class="btn btn-action" onclick="startTMatch(@Model.Room.Id)">
                        <i class="fa-solid fa-play me-2"></i>Start Match (Tournament)
                    </button>
                }
                else if (Model.Room.Stage == 0 && Model.Room.Tournament != null && Model.Room.Mode == "team")
                {
                    <button id="endMatchButton" class="btn btn-danger-custom" onclick="endMatch(@Model.CurrentMatch?.Id)"><i class="fa-solid fa-flag-checkered me-2"></i>End Match</button>
                }
            </div>

            @if (Model.Room.Host == loggedUser && Model.Room.Stage == -1 && Model.Room.Tournament == null)
            {
                <div class="mt-4">
                    <label class="form-check-label me-3"><strong>Mode:</strong></label>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="mode" id="singleMode" value="single" checked onclick="toggleMode('single')" />
                        <label class="form-check-label" for="singleMode">Single Mode</label>
                    </div>
                    <div class="form-check form-check-inline">
                        <input class="form-check-input" type="radio" name="mode" id="teamMode" value="team" onclick="toggleMode('team')" />
                        <label class="form-check-label" for="teamMode">Team Mode</label>
                    </div>
                </div>
            }
        </div>

        <div class="room-details-section mt-4">
            <h3>Players in Room</h3>
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Player Username</th>
                    </tr>
                </thead>
                <tbody>
                    @if (players != null && players.Any())
                    {
                        foreach (var player in players)
                        {
                            <tr>
                                <td>@player.Username</td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="1">No players have joined this room yet.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (Model.Room.Mode == "single")
        {
            <div class="room-details-section mt-4">
                <h3>Match Participants (Single Mode)</h3>
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Player</th>
                            <th>Score</th>
                            @if (Model.Room.Stage == 0 && Model.Room.Host == loggedUser)
                            {
                                <th>Add Point</th>
                                <th>Remove Point</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @if (participants != null && participants.Any())
                        {
                            foreach (var participant in participants)
                            {
                                <tr>
                                    <td>@participant.User.Username</td>
                                    <td>@participant.Score</td>
                                    @if (Model.Room.Host == loggedUser && Model.Room.Stage == 0)
                                    {
                                        <td>
                                            <button class="btn btn-success" onclick="addPoint(@Model.CurrentMatch?.Id, @participant.Id)"><i class="fa-solid fa-plus"></i></button>
                                        </td>
                                        <td>
                                            <button class="btn btn-danger" onclick="removePoint(@Model.CurrentMatch?.Id, @participant.Id)"><i class="fa-solid fa-minus"></i></button>
                                        </td>
                                    }
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4">No participants in the current match (single mode).</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else if (Model.Room.Mode == "team" && Model.Teams != null)
        {
            <div class="room-details-section mt-4">
                <h3>Match Teams and Scores (Team Mode)</h3>
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Team</th>
                            <th>Score</th>
                            <th>Members</th>
                            @if (Model.Room.Stage == 0 && Model.Room.Host == loggedUser)
                            {
                                <th>Add Point</th>
                                <th>Remove Point</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        @if (teams != null && teams.Any())
                        {
                            foreach (var team in teams)
                            {
                                <tr>
                                    <td>@team.Name</td>
                                    <td>@Model.Participants.Where(p => p.Team == team).FirstOrDefault()?.Score</td>
                                    <td>
                                        @if (Model.Participants != null && Model.Participants.Any())
                                        {
                                            <ul class="list-unstyled mb-0">
                                                @foreach (var participant in Model.Participants.Where(t => t.Team == team))
                                                {
                                                    <li>@participant.User.Username
                                                        @if(participant.Role.Any()){
                                                            <div>Role: @participant.Role</div>
                                                        }
                                                    </li>
                                                    
                                                }
                                            </ul>
                                        }
                                        else
                                        {
                                            <span>No members assigned.</span>
                                        }
                                    </td>
                                    @if (Model.Room.Host == loggedUser && Model.Room.Stage == 0)
                                    {
                                        <td>
                                            <button class="btn btn-success" onclick="addPointTeam(@Model.CurrentMatch?.Id, @team.Id)"><i class="fa-solid fa-plus"></i></button>
                                        </td>
                                        <td>
                                            <button class="btn btn-danger" onclick="removePointTeam(@Model.CurrentMatch?.Id, @team.Id)"><i class="fa-solid fa-minus"></i></button>
                                        </td>
                                    }
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="5">No teams created for the current match (team mode).</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

        <div class="modal fade" id="startEarlyModal" tabindex="-1" aria-labelledby="startEarlyModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <form id="teamAssignmentForm">
                        <div class="modal-header">
                            <h5 class="modal-title" id="startEarlyModalLabel">Create the teams</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <div class="mb-3">
                                <button type="button" class="btn btn-outline-primary" onclick="addTeam()">Add Team</button>
                            </div>
                            <div id="teamsContainer" class="row">
                                </div>
                            <hr />
                            <h5>Assign players to their teams and roles.</h5>
                            @if (players == null || !players.Any())
                            {
                                <p>No players have joined yet.</p>
                            }
                            else
                            {
                                @foreach (var player in players)
                                {
                                    <div class="mb-2">
                                        <label class="form-label">@player.Username</label>
                                        <select name="teamAssignments[@player.Id]" class="form-select team-select">
                                            <option value="">--Select a team--</option>
                                        </select>
                                        <input type="text" name="roles[@player.Id]" class="form-control mt-2" placeholder="Role (e.g., Captain, Attacker)" />
                                    </div>
                                }
                            }
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            <button type="button" onclick="startGame(@Model.Room.Id)" class="btn btn-primary">Confirm Start</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        // function for ending match
        function endMatch(matchId) {
            $.ajax({
                url: '/Room/End',
                type: 'POST',
                data: {
                    matchId: matchId
                },
                success: function (response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert(response.message);
                    }
                },
                error: function (xhr, status, error) {
                    alert('An error occurred while ending the match.');
                }
            });
        }

        // add individual point
        function addPoint(matchId, participantId) {
            $.ajax({
                url: "/Room/AddPoint",
                type: "POST",
                data: {
                    matchId: matchId,
                    participantId: participantId
                },
                success: function () {
                    location.reload();
                },
                error: function (xhr, status, error) {
                    alert('An error occurred while adding a point.');
                }
            })
        }

        // remove individual point
        function removePoint(matchId, participantId) {
            $.ajax({
                url: "/Room/RemovePoint",
                type: "POST",
                data: {
                    matchId: matchId,
                    participantId: participantId
                },
                success: function () {
                    location.reload();
                },
                error: function (xhr, status, error) {
                    alert('An error occurred while removing a point.');
                }
            })
        }

        // add team point
        function addPointTeam(matchId, teamId) {
            $.ajax({
                url: "/Room/AddPointTeam",
                type: "POST",
                data: {
                    matchId: matchId,
                    teamId: teamId
                },
                success: function () {
                    location.reload();
                },
                error: function (xhr, status, error) {
                    alert('An error occurred while adding a point.');
                }
            })
        }

        // remove team points
        function removePointTeam(matchId, teamId) {
            $.ajax({
                url: "/Room/RemovePointTeam",
                type: "POST",
                data: {
                    matchId: matchId,
                    teamId: teamId
                },
                success: function () {
                    location.reload();
                },
                error: function (xhr, status, error) {
                    alert('An error occurred while removing a point.');
                }
            })
        }

        // function for starting a tournament match
        function startTMatch(roomId) {
            $.ajax({
                url: "/Room/StartTMatch",
                type: "POST",
                data: {
                    id: roomId
                },
                success: function (data) {
                    location.reload();
                },
                error: function (xhr, status, error) {
                    alert("There was an error starting the team match.");
                }
            });
        }

        // function for joining a room
        function join(roomId) {
            $.ajax({
                type: 'POST',
                url: "/Room/Join/" + roomId,
                success: function (response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert(response.message);
                    }
                },
                error: function () {
                    alert("There was an error trying to join the room");
                }
            });
        }

        // function for leaving a room
        function leave(roomId) {
            $.ajax({
                type: 'POST',
                url: "/Room/Leave/" + roomId,
                success: function (response) {
                    if (response.success) {
                        location.reload();
                    } else {
                        alert(response.message);
                    }
                },
                error: function () {
                    alert("There was an error trying to leave the room");
                }
            });
        }

        // global variables
        let currentMode = '@Model.Room.Mode';
        let teamCount = 0;

        $(document).ready(function () {
            if (currentMode === 'team') {
                $('#teamMode').prop('checked', true);
            } else {
                $('#singleMode').prop('checked', true);
            }
        });

        // open modal
        function checkAndOpenModal(roomId) {
            if (currentMode === 'team') {
                $('#startEarlyModal').modal('show');
            } else {
                startSingleGame(roomId);
            }
        }

        // toggling room mode
        function toggleMode(mode) {
            currentMode = mode;
        }

        // function for adding a team
        function addTeam() {
            teamCount++;
            const teamHtml = `
                <div class="col-md-4 mb-3 team-card" data-team-id="${teamCount}">
                    <div class="card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h5 class="card-title mb-0">Team ${teamCount}</h5>
                                <button type="button" class="btn-close btn-close-white" onclick="removeTeam(${teamCount})"></button>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Team Name</label>
                                <input type="text" class="form-control team-name"
                                        value="Team ${teamCount}"
                                        onchange="updateTeamOptions(${teamCount}, this.value)" required title="The team must have a name">
                            </div>
                        </div>
                    </div>
                </div>
            `;

            $('#teamsContainer').append(teamHtml);
            updateAllTeamSelects();
        }

        // function for removing a team
        function removeTeam(teamId) {
            $(`.team-card[data-team-id="${teamId}"]`).remove();
            updateAllTeamSelects();
        }

        // function for dynamically updating teams
        function updateAllTeamSelects() {
            $('.team-select').each(function () {
                const defaultOption = $(this).find('option:first');
                $(this).empty().append(defaultOption);
            });

            $('.team-card').each(function () {
                const teamId = $(this).data('team-id');
                const teamName = $(this).find('.team-name').val();

                $('.team-select').each(function () {
                    $(this).append(`<option value="${teamName}">${teamName}</option>`);
                });
            });
        }

        function updateTeamOptions(teamId, newName) {
            updateAllTeamSelects();
        }

        // starting single game
        function startSingleGame(roomId) {
            $.ajax({
                url: '/Room/StartIndividual',
                type: 'POST',
                data: { roomId: roomId },
                success: function () {
                    location.reload();
                },
                error: function () {
                    alert('Failed to start the match.');
                }
            });
        }

        // starting team game
        function startGame(roomId) {
            const teamAssignments = {};
            const roles = {};
            const teamNames = [];

            $('.team-name').each(function() {
                const name = $(this).val();
                if (name) {
                    teamNames.push(name);
                }
            });

            $('select[name^="teamAssignments"]').each(function () {
                const playerId = $(this).attr('name').match(/\[(\d+)\]/)[1];
                teamAssignments[playerId] = $(this).val();
            });

            $('input[name^="roles"]').each(function () {
                const playerId = $(this).attr('name').match(/\[(\d+)\]/)[1];
                roles[playerId] = $(this).val();
            });

            $.ajax({
                url: '/Room/Start',
                type: 'POST',
                data: {
                    roomId: roomId,
                    teamAssignments: teamAssignments,
                    roles: roles,
                    teamNames: teamNames
                },
                success: function () {
                    location.reload();
                },
                error: function () {
                    alert('Failed to start the match.');
                }
            });
        }
    </script>
</body>